{"version":3,"sources":["components/GuessCard/index.js","components/Container/index.js","components/Title/index.js","components/Instructions/index.js","components/Score/index.js","components/CardContainer/index.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["GuessCard","props","react_default","a","createElement","className","onClick","handleIconClick","id","data-click","clicked","alt","name","src","image","Container","children","Title","Instructions","Score","components_Instructions","currentScore","highestScore","CardContainer","Modal","tabIndex","role","type","data-dismiss","aria-label","gameReset","aria-hidden","App","state","icons","showModal","shuffleArr","arr","i","length","j","Math","floor","random","_ref","console","log","shuffledIconArray","_this","setState","concat","Object","toConsumableArray","includes","handleWrongGuess","handleCorrentGuess","iconArray","newCurrentScore","newHighScore","_this2","this","components_Container","components_Title","components_Score","components_CardContainer","components_Modal","map","icon","components_GuessCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcb13138.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction GuessCard(props) {\n  return (\n    <div className=\"col-sm-4 text-center\" onClick={() => {\n      props.handleIconClick(props.id)\n    }}>\n      <img className=\"icons img-responsive\" id={props.id} data-click={props.clicked} alt={props.name} src={props.image}/>\n  </div>\n  );\n}\n\nexport default GuessCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title() {\n  return (\n    <div className=\"row\">\n      <div id=\"logoCol\" className=\"col-sm text-center\">\n        <img className=\"logo\" alt=\"Magical Memory Game\" src='../../images/logo.svg' />\n      </div>\n    </div>\n  )\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Instructions() {\n  return <p>\n    Click on an image to earn points, but don't click on any more than once!\n  </p>\n}\n\n\n\nexport default Instructions;","import React from \"react\";\nimport \"./style.css\";\nimport Instructions from \"../Instructions\"\n\nfunction Score(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <div className=\"jumbotron text-center\">\n        <Instructions />\n        <span className=\"currentScore\">Current Score: {props.currentScore} </span>\n        <span className=\"highestScore\">Highest Score: {props.highestScore}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default Score;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardContainer(props) {\n  return (\n    <div className=\"row\">\n      \n      {props.children}\n      \n    </div>\n  )\n}\n\nexport default CardContainer;","import React from \"react\";\n// import \"./style.css\";\n\nfunction Modal(props) {\n  return (\n    <div className=\"modal fade\" tabIndex=\"-1\" role=\"dialog\">\n    <div className=\"modal-dialog\" role=\"document\">\n      <div className=\"modal-content\">\n        <div className=\"modal-header\">\n          <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={() => {\n      props.gameReset()\n    }}>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div className=\"modal-body\">\n          <p>GAME OVER</p>\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default Modal;","import React, { Component } from \"react\";\nimport GuessCard from \"./components/GuessCard\";\nimport Container from \"./components/Container\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport CardContainer from \"./components/CardContainer\";\nimport Modal from \"./components/Modal\";\nimport icons from \"./icons.json\";\n\n\nclass App extends Component {\n\tstate = {\n\t\ticons,\n\t\tclicked: [],\n\t\tcurrentScore: 0,\n    highestScore: 0,\n    showModal: false\n\t}\n\n\tshuffleArr = (arr) => {\n\t\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[arr[i], arr[j]] = [arr[j], arr[i]];\n\t\t}\n\t\treturn arr;\n  }\n\n\thandleIconClick = (id) => {\n\t\tconsole.log(id)\n\t\tlet shuffledIconArray = this.shuffleArr(this.state.icons);\n\t\t\n\t\tthis.setState({ clicked: [...this.state.clicked, id] });\n\n    if (this.state.clicked.includes(id)) {\n\t\t\t\t\tthis.handleWrongGuess()\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\tthis.handleCorrentGuess(shuffledIconArray)\n\t\t\t\t}\n\n\t\t\t}\n\n\n\n\thandleWrongGuess = () => {\n\t\tthis.setState({\n\t\t\ticons: icons,\n\t\t\tclicked: [],\n      currentScore: 0,\n      showModal: true\n    });\n\t}\n\n\thandleCorrentGuess = (iconArray) => {\n\t\tlet newCurrentScore = this.state.currentScore + 1;\n\n\t\tlet newHighScore = this.state.highestScore;\n\n\t\tif (newCurrentScore > this.state.highestScore) {\n\t\t\tnewHighScore = newCurrentScore;\n\t\t}\n\n\t\tthis.setState({\n\t\t\ticons: iconArray,\n\t\t\tcurrentScore: newCurrentScore,\n\t\t\thighestScore: newHighScore\n\t\t});\n\t}\n\n\tgameReset = () => {\n\t\tthis.setState({\n\t\t\ticons: icons,\n\t\t\tclicked: [],\n      currentScore: 0,\n      showModal: false\n    });\n\t}\n\n\n\trender() {\n\n\t\treturn (\n      <Container>\n        <Title></Title>\n        <Score\n        currentScore={this.state.currentScore}\n        highestScore={this.state.highestScore}>\n        </Score>\n        <CardContainer>\n\t\t\t\t{ this.state.showModal ? <Modal gameReset={this.gameReset} /> : null }\n          {console.log(icons)}\n\t\t\t\t\t{this.state.icons.map(icon => (\n\t\t\t\t\t\t<GuessCard\n\t\t\t\t\t\t\tid={icon.id}\n\t\t\t\t\t\t\tkey={icon.id}\n\t\t\t\t\t\t\tname={icon.name}\n\t\t\t\t\t\t\timage={icon.image}\n\t\t\t\t\t\t\thandleIconClick={this.handleIconClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</CardContainer>\n        </Container>\n\t\t);\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}